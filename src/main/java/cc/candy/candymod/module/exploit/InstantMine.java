package cc.candy.candymod.module.exploit;

import cc.candy.candymod.CandyMod;
import cc.candy.candymod.event.events.network.PacketEvent;
import cc.candy.candymod.event.events.world.BlockEvent;
import cc.candy.candymod.module.Module;
import cc.candy.candymod.setting.Setting;
import cc.candy.candymod.utils.GeometryMasks;
import cc.candy.candymod.utils.RenderUtil3D;
import cc.candy.candymod.utils.Timer;
import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.renderer.entity.Render;
import net.minecraft.init.Items;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.World;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

import java.awt.*;

public class InstantMine extends Module {
    public Setting<Boolean> autoBreak = register(new Setting("AutoBreak", true));;
    public Setting<Integer> delay = register(new Setting("Delay", 20, 500, 0));
    public Setting<Boolean> picOnly = register(new Setting("Only Pickaxe", true));;
    public Setting<Boolean> render = this.render = register(new Setting("Render", false));;
    public Setting<Color> color = register(new Setting("Color", new Color(0 , 0 , 230 , 90), v -> this.render.getValue()));
    public Setting<Boolean> line = register(new Setting("Line", false, v -> this.render.getValue()));
    public Setting<Float> width = register(new Setting("Width" , 2.0F , 5.0F , 0.2F , v -> render.getValue() && line.getValue()));

    private static boolean packetCancel = false;
    private static Timer breaktimer = new Timer();
    private static Timer timer = new Timer();
    private static EnumFacing direction;
    public static BlockPos FourZeroFourBlock;
    private static BlockPos lastBlock;

    public InstantMine()
    {
        super("InstantMine" , Categories.EXPLOIT , false , false);
    }

    @Override
    public void onRender3D() {
        if (FourZeroFourBlock != null && this.render.getValue()) {
            if(line.getValue())
                RenderUtil3D.drawBoundingBox(FourZeroFourBlock , 1.0F , width.getValue() , color.getValue());
            else
                RenderUtil3D.drawBox(FourZeroFourBlock, 1.0F , color.getValue() , GeometryMasks.Quad.ALL);
        }
    }

    @Override
    public void onUpdate() {
		if(!CandyMod.m_module.getModuleWithClass(SilentPickel.class).isEnable)
		    update();
    }
	
	public void update()
	{
		if (nullCheck())
            return;
        if (FourZeroFourBlock != null && (this.autoBreak.getValue() && breaktimer.passedMs(this.delay.getValue()))) {
            if (this.picOnly.getValue() && mc.player.getHeldItem(EnumHand.MAIN_HAND).getItem() != Items.DIAMOND_PICKAXE)
                return;
            mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, FourZeroFourBlock, direction));
            breaktimer.reset();
        }
        mc.playerController.blockHitDelay = 0;
	}

    @Override
    public void onPacketSend(PacketEvent.Send event) {
        if (nullCheck())
            return;
        Packet<?> packet = event.getPacket();
        if (packet instanceof CPacketPlayerDigging && (
                (CPacketPlayerDigging)packet).getAction() == CPacketPlayerDigging.Action.START_DESTROY_BLOCK && packetCancel)
            event.cancel();
    }

    @SubscribeEvent
    public void OnDamageBlock(BlockEvent event) {
        if (nullCheck())
            return;
        if(!isEnable)
            return;

        startBreak(event.pos , event.facing);
        event.cancel();
    }

    public static void startBreak(BlockPos pos , EnumFacing facing)
    {
        if (canBreak(pos)) {
            if (lastBlock == null || pos.getX() != lastBlock.getX() || pos.getY() != lastBlock.getY() || pos.getZ() != lastBlock.getZ()) {
                packetCancel = false;
                mc.player.swingArm(EnumHand.MAIN_HAND);
                mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, pos, facing));
            }
            packetCancel = true;
            mc.player.connection.sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, pos, facing));
            FourZeroFourBlock = pos;
            lastBlock = pos;
            direction = facing;
        }
    }

    private static boolean canBreak(BlockPos pos) {
        IBlockState blockState = mc.world.getBlockState(pos);
        Block block = blockState.getBlock();
        return (block.getBlockHardness(blockState, (World)mc.world, pos) != -1.0F);
    }




}
