package cc.candy.candymod.module.exploit;

import cc.candy.candymod.CandyMod;
import cc.candy.candymod.module.Module;
import cc.candy.candymod.module.combat.CevBreaker;
import cc.candy.candymod.module.combat.CivBreaker;
import cc.candy.candymod.module.combat.PistonAura;
import cc.candy.candymod.setting.Setting;
import cc.candy.candymod.utils.InventoryUtil;
import cc.candy.candymod.utils.Timer;
import net.minecraft.init.Items;
import net.minecraft.network.play.client.CPacketHeldItemChange;
import net.minecraft.util.EnumHand;

public class SilentPickel extends Module {
    public Setting<Float> delay = register(new Setting("Delay" , 3.0F , 25.0F , 0.0F));
    public Setting<Boolean> noGap = register(new Setting("NoGapSwitch" , true));
    public Setting<Boolean> noPA = register(new Setting("NoPASwitch" , true));
    public Timer timer;
    public int oldslot = -1;
    public EnumHand oldhand = null;

    public SilentPickel()
    {
        super("SilentPickel" , Categories.EXPLOIT , false , false);
    }

    @Override
    public void onEnable()
    {
        timer = new Timer();
    }

    @Override
    public void onUpdate()
    {
		if(nullCheck()) return;
		int pickel = InventoryUtil.getItemHotbar(Items.DIAMOND_PICKAXE);
        if(pickel == -1) return;

        if(mc.player.inventory.getCurrentItem().getItem() == Items.GOLDEN_APPLE && noGap.getValue()) return;
        Module pa = CandyMod.m_module.getModuleWithClass(PistonAura.class);
        if(pa.isEnable && noPA.getValue()) return;
        Module cev = CandyMod.m_module.getModuleWithClass(CevBreaker.class);
        Module civ = CandyMod.m_module.getModuleWithClass(CivBreaker.class);
        if(cev.isEnable || civ.isEnable) return;

        if(InstantMine.FourZeroFourBlock != null) {
            if(mc.player.inventory.getCurrentItem().getItem() != Items.DIAMOND_PICKAXE) setItem(pickel);
            InstantMine mine = (InstantMine) CandyMod.m_module.getModuleWithClass(InstantMine.class);
            mine.update();
		    restoreItem();
        }
    }
	
    public void setItem(int slot)
    {
        oldhand = null;
        if(mc.player.isHandActive()) {
            oldhand = mc.player.getActiveHand();
        }
        oldslot = mc.player.inventory.currentItem;
        mc.player.connection.sendPacket(new CPacketHeldItemChange(slot));
    }

    public void restoreItem()
    {
        if(oldslot != -1)
        {
            if(oldhand != null) {
                mc.player.setActiveHand(oldhand);
            }
            mc.player.connection.sendPacket(new CPacketHeldItemChange(oldslot));
            oldslot = -1;
            oldhand = null;
        }
    }
}
