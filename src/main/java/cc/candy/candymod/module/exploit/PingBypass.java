package cc.candy.candymod.module.exploit;

import cc.candy.candymod.event.events.network.PacketEvent;
import cc.candy.candymod.module.Module;
import cc.candy.candymod.setting.Setting;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.init.SoundEvents;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketAnimation;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketUpdateSign;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraft.network.status.client.CPacketPing;
import net.minecraft.util.SoundCategory;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

import java.util.ArrayList;

public class PingBypass extends Module {
    public Setting<Boolean> ping = register(new Setting("Ping" , true));
    public Setting<Boolean> animation = register(new Setting("Animation" , true));
    public Setting<Boolean> sign = register(new Setting("Sign" , true));
    public Setting<Boolean> crystal = register(new Setting("Crystal" , true));
    public Setting<Boolean> remove = register(new Setting("Remove" , true , v -> crystal.getValue()));

    public PingBypass(){
        super("PingBypass" , Categories.EXPLOIT , false , false);
    }

    @SubscribeEvent(priority = EventPriority.HIGH)
    public void onPacketSend(PacketEvent.Send event){
        if(!isEnable) return;
        Packet packet = event.getPacket();

        if(packet instanceof CPacketPing && ping.getValue()) event.cancel();
        if(packet instanceof CPacketAnimation && animation.getValue()) event.cancel();
        if(packet instanceof CPacketUpdateSign && sign.getValue()) event.cancel();
    }

    @SubscribeEvent(priority = EventPriority.HIGH)
    public void onPacketReceive(PacketEvent.Receive event){
        if(!isEnable) return;
        if(crystal.getValue()){
            if (event.getPacket() instanceof SPacketSoundEffect) {
                if (((SPacketSoundEffect) event.getPacket()).getCategory() == SoundCategory.BLOCKS && ((SPacketSoundEffect) event.getPacket()).getSound() == SoundEvents.ENTITY_GENERIC_EXPLODE) {
                    for (Entity crystal : new ArrayList<>(mc.world.loadedEntityList)) {
                        if (crystal instanceof EntityEnderCrystal)
                            if(remove.getValue()) mc.world.removeEntityFromWorld(crystal.entityId);
                            else crystal.setDead();
                    }
                }
            }
        }
    }
}
