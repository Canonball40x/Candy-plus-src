package cc.candy.candymod.module.exploit;

import cc.candy.candymod.module.Module;
import cc.candy.candymod.setting.Setting;
import cc.candy.candymod.utils.BlockUtil;
import cc.candy.candymod.utils.InventoryUtil;
import net.minecraft.block.BlockObsidian;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.init.Blocks;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketHeldItemChange;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;

import static net.minecraft.network.play.client.CPacketEntityAction.Action.START_SNEAKING;
import static net.minecraft.network.play.client.CPacketEntityAction.Action.STOP_SNEAKING;

/**
 * @author Ciruu
 * Updated by CPacketCustomPayload on 28/04/2021
 */

public class Burrow extends Module {
    private final Setting<Float> offset = register(new Setting<>("Offset",  7.0F, 30.0F, -20.0F));
    private final Setting<Boolean> sneak = register( new Setting<>("Sneak", false));
    private final Setting<Boolean> echest = register( new Setting<>("EChest", false));
    private final Setting<Boolean> sushiBypass = register( new Setting<>("Bypass", false));

    private BlockPos originalPos;
    private int oldSlot = -1;

    public Burrow(){
        super("Burrow" , Categories.EXPLOIT , false , false);
    }

    @Override
    public void onEnable() {
        super.onEnable();

        // Save our original pos
        originalPos = new BlockPos(mc.player.posX, mc.player.posY, mc.player.posZ);

        // If we can't place in our actual post then toggle and return
        if (mc.world.getBlockState(new BlockPos(mc.player.posX, mc.player.posY, mc.player.posZ)).getBlock().equals(Blocks.OBSIDIAN) ||
                intersectsWithEntity(this.originalPos)) {
            toggle();
            return;
        }

        // Save our item slot
        oldSlot = mc.player.inventory.currentItem;
    }

    @Override
    public void onTick() {
        // If we don't have obsidian in hotbar toggle and return
        if ((InventoryUtil.findHotbarBlock(Blocks.OBSIDIAN) == -1 && !echest.getValue())
                || (InventoryUtil.findHotbarBlock(Blocks.ENDER_CHEST) == -1 && echest.getValue())) {
            sendMessage("Can't find material in hotbar!");
            toggle();
            return;
        }

        // Change to obsidian slot
        switchToSlot(InventoryUtil.findHotbarBlock(echest.getValue() ? Blocks.ENDER_CHEST : Blocks.OBSIDIAN));

        // Fake jump
        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 0.41999998688698D, mc.player.posZ, true));
        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 0.7531999805211997D, mc.player.posZ, true));
        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1.00133597911214D, mc.player.posZ, true));
        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + 1.16610926093821D, mc.player.posZ, true));

        // Sneak option.
        boolean sneaking = mc.player.isSneaking();
        if (sneak.getValue()) {
            if (sneaking) {
                mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, START_SNEAKING));
            }
        }

        // Place block
        BlockUtil.placeBlock(originalPos, EnumHand.MAIN_HAND , false, true , sneaking);

        // Rubberband
        if(sushiBypass.getValue()){
            mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY - 1.11D, mc.player.posZ, false));
        }

        mc.player.connection.sendPacket(new CPacketPlayer.Position(mc.player.posX, mc.player.posY + offset.getValue(), mc.player.posZ, false));

        // SwitchBack
        switchToSlot(oldSlot);

        // Stop sneak if the option was enabled.
        if (sneak.getValue()) {
            if (sneaking) {
                mc.player.connection.sendPacket(new CPacketEntityAction(mc.player, STOP_SNEAKING));
            }
        }
        // AutoDisable
        toggle();
    };

    private boolean intersectsWithEntity(final BlockPos pos) {
        for (final Entity entity : mc.world.loadedEntityList) {
            if (entity.equals(mc.player)) continue;
            if (entity instanceof EntityItem) continue;
            if (new AxisAlignedBB(pos).intersects(entity.getEntityBoundingBox())) return true;
        }
        return false;
    }

    public static void switchToSlot(final int slot) {
        mc.player.connection.sendPacket(new CPacketHeldItemChange(slot));
        mc.player.inventory.currentItem = slot;
        mc.playerController.updateController();
    }
}
